<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Dockerfile">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Dockerfile" />
              <option name="updatedContent" value="# Use an official Python runtime as a parent image&#10;FROM python:3.11-slim&#10;&#10;# Set the working directory in the container&#10;WORKDIR /app&#10;&#10;# Copy the dependencies file to the working directory&#10;COPY requirements.txt .&#10;&#10;# Install any needed packages specified in requirements.txt&#10;RUN pip install --no-cache-dir -r requirements.txt&#10;&#10;# Copy the rest of the application's code to the working directory&#10;COPY . .&#10;&#10;# Expose the port the app runs on&#10;EXPOSE 8000&#10;&#10;# Command to run the application&#10;CMD [&quot;uvicorn&quot;, &quot;main:app&quot;, &quot;--host&quot;, &quot;0.0.0.0&quot;, &quot;--port&quot;, &quot;8000&quot;]&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/PRICING.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/PRICING.md" />
              <option name="originalContent" value="# Nexa Research Agent Pricing&#10;&#10;The Nexa Research Agent is available as a hosted API service with the following tiers. All tiers include access to our powerful research pipeline: `plan → search → synthesize`.&#10;&#10;## Tiers&#10;&#10;### Hobbyist&#10;**$10 / month**&#10;- 200 API requests per month&#10;- Standard processing priority&#10;- Community support via GitHub Discussions&#10;&#10;Perfect for students, hobbyists, and light users who need to perform occasional research tasks.&#10;&#10;### Professional&#10;**$49 / month**&#10;- 1,000 API requests per month&#10;- High-priority processing queue&#10;- Access to advanced synthesis models&#10;- Email &amp; Telegram support&#10;&#10;Designed for professionals, researchers, and developers who rely on timely and in-depth insights for their work.&#10;&#10;### Enterprise&#10;**Contact for pricing**&#10;- Custom request volume&#10;- Dedicated infrastructure and support&#10;- On-premise deployment options&#10;- Custom feature development&#10;&#10;For teams and organizations with high-volume or specialized research needs. Please contact us at `nexa.infra@pm.me` to discuss a custom plan.&#10;&#10;## How to Subscribe&#10;&#10;You can subscribe to any plan via Stripe. Visit our Gumroad page to get started.&#10;&#10;- **Stripe/Gumroad:** [Link to your payment page]&#10;- **Contact:** `nexa.infra@pm.me` or Telegram `@nexa_engineering` for Enterprise inquiries.&#10;&#10;" />
              <option name="updatedContent" value="# Nexa Research Agent Pricing&#10;&#10;The Nexa Research Agent is available as a simple, all-inclusive subscription. Your plan includes full access to our powerful research pipeline: `plan → search → synthesize`.&#10;&#10;Our service operates on a **Bring Your Own Key (BYOK)** model, giving you full control over your costs.&#10;&#10;## Pro Plan&#10;**$15 / month**&#10;- Full access to the research platform and all features&#10;- Priority processing queue&#10;- Access to all supported premium models&#10;- Use your own API keys (OpenRouter, Exa.ai) for cost control&#10;- Support via Email &amp; GitHub Discussions&#10;&#10;This single, comprehensive plan is designed for professionals, researchers, and developers who need a fast, convenient, and powerful research tool.&#10;&#10;## 7-Day Free Trial&#10;&#10;All subscriptions start with a 7-day free trial. You will receive your Nexa Access Key immediately and can cancel anytime before the trial period ends without being charged.&#10;&#10;## How to Subscribe&#10;&#10;You can subscribe via Stripe to get your Nexa Access Key instantly.&#10;&#10;- **Subscribe Now:** [Link to your Stripe Checkout page]&#10;- **Contact:** `nexa.infra@pm.me` for any questions." />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="originalContent" value="# Nexa Research Agent&#10;&#10;&gt; **AI-Powered Research Automation Platform**  &#10;&gt; Generate comprehensive, well-sourced research reports on any topic using advanced LLMs and web search capabilities.&#10;&#10;[![FastAPI](https://img.shields.io/badge/FastAPI-0.104.1-green.svg)](https://fastapi.tiangolo.com)&#10;[![Python](https://img.shields.io/badge/Python-3.11+-blue.svg)](https://python.org)&#10;[![Redis](https://img.shields.io/badge/Redis-7.0-red.svg)](https://redis.io)&#10;[![Stripe](https://img.shields.io/badge/Stripe-Integrated-purple.svg)](https://stripe.com)&#10;&#10;---&#10;&#10;## **Overview**&#10;&#10;Nexa Research Agent is an intelligent platform that transforms your topic queries into comprehensive, well-structured research reports. It acts as a sophisticated orchestration layer, leveraging a powerful pipeline of LLM reasoning, advanced web search, and content synthesis to deliver publication-quality research in minutes.&#10;&#10;Our service operates on a **Bring Your Own Key (BYOK)** model.&#10;You subscribe to the Nexa platform for its speed, convenience, and structured output, while using your own API keys&#10;(e.g., for OpenRouter, Exa.ai).&#10;This gives you full control over your costs and model usage.&#10;&#10;### **Key Features**&#10;&#10;- **Intelligent Orchestration**: Sophisticated pipeline for planning, searching, and synthesizing research&#10;- **Advanced Search**: Exa.ai integration for high-quality web search and content discovery.&#10;- **Bring Your Own Key (BYOK)**: Use your own API keys for full cost control.&#10;- **Iterative Research**: Multi-iteration search loops with reflection and refinement.&#10;- **Professional Synthesis**: AI-powered report compilation with proper citations&#10;- **High Performance**: Redis caching, async processing, and rate limiting&#10;- **Flexible Pricing**: Stripe-integrated subscription for access to the Nexa platform.&#10;- **Enterprise Ready**: Authentication, rate limiting, and comprehensive monitoring&#10;&#10;---&#10;&#10;## **Architecture**&#10;&#10;```mermaid&#10;graph TB&#10;    A[User Query] --&gt; B[Research Planner]&#10;    B --&gt; C[Paragraph Tasks]&#10;    C --&gt; D[Research Engine]&#10;    D --&gt; E[Exa.ai Search]&#10;    D --&gt; F[LLM Reflection]&#10;    E --&gt; F&#10;    F --&gt; D&#10;    D --&gt; G[Report Synthesizer]&#10;    G --&gt; H[Final Report]&#10;    &#10;    I[Redis Cache] --&gt; B&#10;    I --&gt; D&#10;    I --&gt; G&#10;    &#10;    J[Stripe] --&gt; K[Tier Management]&#10;    K --&gt; C&#10;    K --&gt; D&#10;```&#10;&#10;### **Data Flow**&#10;&#10;1. **Topic → LLM Plan**: OpenRouter models generate structured research plans&#10;2. **Paragraph Fan-out**: Async task distribution for parallel processing  &#10;3. **Research Loop**: Iterative search ↔ reflect cycles (≤ 3 iterations)&#10;4. **Synthesis**: LLM-powered paragraph and report compilation&#10;5. **Caching &amp; Return**: Redis caching with tier-based TTL&#10;&#10;---&#10;&#10;## **Technology Stack**&#10;&#10;| **Component**     | **Technology** | **Purpose**                                       |&#10;|-------------------|----------------|---------------------------------------------------|&#10;| **API Framework** | FastAPI        | High-performance async API                        |&#10;| **LLM Provider**  | OpenRouter     | Multi-model routing (DeepSeek-R1, Claude-3, Qwen) |&#10;| **Search Engine** | Exa.ai         | Neural web search with content extraction         |&#10;| **Cache Layer**   | Redis          | Query caching and rate limiting                   |&#10;| **Database**      | PostgresSQL    | User management and session storage               |&#10;| **Vector DB**     | Qdrant         | Semantic search and embeddings                    |&#10;| **Payments**      | Stripe         | Subscription management and billing               |&#10;| **Validation**    | Pydantic v2    | Runtime type checking and data validation         |&#10;| **Deployment**    | Docker         | Containerized deployment                          |&#10;&#10;---&#10;&#10;## **Quick Start**&#10;&#10;### **Prerequisites**&#10;&#10;- A Nexa Research Agent subscription and access key.&#10;- Your own API Keys for third-party services (e.g., OpenRouter, Exa.ai).&#10;- Docker &amp; Docker Compose (for local deployment).&#10;&#10;### **1. Get Access**&#10;&#10;1.  Visit our website and subscribe to a plan to receive your **Nexa Access Key**.&#10;2.  Obtain API keys from the services you wish to use (e.g., [OpenRouter](https://openrouter.ai/), [Exa.ai](https://exa.ai/)).&#10;&#10;### **2. Running the Service**&#10;&#10;The primary way to use the service is through our hosted web interface. Simply navigate to the app, enter your Nexa Access Key to unlock the tool, and then provide your OpenRouter and Exa keys to begin running queries.&#10;&#10;### **(Optional) Local Deployment**&#10;&#10;If you need to run the service locally:&#10;&#10;```bash&#10;git clone https://github.com/your-org/nexa-research-agent.git&#10;cd nexa-research-agent&#10;&#10;# Copy environment template&#10;cp .env.example .env&#10;```&#10;&#10;### **3. Configure Environment**&#10;&#10;Edit `.env` with your keys. The `NEXA_ACCESS_KEY` would be one you define for your local instance.&#10;&#10;```bash&#10;# Required API Keys for the service to function&#10;OPENROUTER_API_KEY=your_openrouter_key&#10;EXA_API_KEY=your_exa_key&#10;&#10;# Stripe configuration&#10;STRIPE_SECRET_KEY=sk_test_your_stripe_key&#10;STRIPE_PRICE_ID=price_xxxxxxxxxxxxxx # Price ID for the $15/month plan&#10;STRIPE_WEBHOOK_SECRET=whsec_xxxxxxxxxxxxxx # From your Stripe webhook settings&#10;&#10;# A self-defined key to secure your local instance&#10;NEXA_ACCESS_KEY=a_secure_key_you_define_for_local_use&#10;&#10;# Database URLs (auto-configured with Docker)&#10;REDIS_URL=redis://localhost:6379&#10;POSTGRES_URL=postgresql://user:pass@localhost/nexa&#10;QDRANT_URL=http://localhost:6333&#10;```&#10;&#10;### **4. Start Services**&#10;&#10;```bash&#10;# Start all services with Docker Compose&#10;docker-compose up -d&#10;```&#10;&#10;### **5. Verify Installation**&#10;&#10;```bash&#10;curl -H &quot;Authorization: Bearer a_secure_key_you_define_for_local_use&quot; http://localhost:8000/health&#10;# Expected: {&quot;status&quot;: &quot;healthy&quot;, &quot;timestamp&quot;: &quot;...&quot;, &quot;version&quot;: &quot;1.0.0&quot;}&#10;```&#10;&#10;---&#10;&#10;## **API Documentation**&#10;&#10;### **Core Endpoints**&#10;&#10;#### **Research Query**&#10;```http&#10;POST /api/v1/query&#10;Authorization: Bearer &lt;user_token&gt;&#10;Content-Type: application/json&#10;&#10;{&#10;  &quot;topic&quot;: &quot;The impact of artificial intelligence on healthcare diagnostics&quot;,&#10;  &quot;user_id&quot;: &quot;user_123&quot;&#10;}&#10;```&#10;&#10;**Response:**&#10;```json&#10;{&#10;  &quot;success&quot;: true,&#10;  &quot;report&quot;: {&#10;    &quot;topic&quot;: &quot;The impact of artificial intelligence on healthcare diagnostics&quot;,&#10;    &quot;markdown&quot;: &quot;# The Impact of AI on Healthcare Diagnostics\n\n## Executive Summary...&quot;,&#10;    &quot;sources&quot;: [&quot;https://example.com/source1&quot;, &quot;https://example.com/source2&quot;],&#10;    &quot;created_at&quot;: &quot;2024-01-15T10:30:00Z&quot;,&#10;    &quot;user_id&quot;: &quot;user_123&quot;,&#10;    &quot;tier&quot;: &quot;pro&quot;,&#10;    &quot;word_count&quot;: 2847&#10;  },&#10;  &quot;cached&quot;: false&#10;}&#10;```&#10;&#10;#### **Create Subscription**&#10;```http&#10;POST /api/v1/subscribe&#10;Authorization: Bearer &lt;user_token&gt;&#10;Content-Type: application/json&#10;&#10;{&#10;  &quot;tier&quot;: &quot;pro&quot;&#10;}&#10;```&#10;&#10;#### **Health Check**&#10;```http&#10;GET /health&#10;```&#10;&#10;### **Interactive Documentation**&#10;&#10;Once running, visit:&#10;- **Swagger UI**: `http://localhost:8000/docs`&#10;- **ReDoc**: `http://localhost:8000/redoc`&#10;&#10;## **Configuration**&#10;&#10;### **Model Routing**&#10;&#10;Customize LLM models in `config.py`:&#10;&#10;```python&#10;MODEL_ROUTING = {&#10;    ModelType.REASONER: &quot;deepseek/deepseek-r1&quot;,        # Planning&#10;    ModelType.SEARCHER: &quot;deepseek/deepseek-r1&quot;,        # Search queries  &#10;    ModelType.REFLECTOR: &quot;qwen/qwen-2-72b-instruct&quot;,   # Result analysis&#10;    ModelType.SUMMARIZER: &quot;anthropic/claude-3-haiku&quot;,  # Content synthesis&#10;    ModelType.COMPILER: &quot;anthropic/claude-3-sonnet&quot;    # Final compilation&#10;}&#10;```&#10;&#10;## **Development**&#10;&#10;### **Project Structure**&#10;&#10;```&#10;nexa-research-agent/&#10;├── main.py                 # FastAPI application entry point&#10;├── config.py               # Configuration and environment variables&#10;├── api/&#10;│   ├── routes.py           # API endpoints and routing&#10;│   └── deps.py             # Authentication and dependencies&#10;├── core/&#10;│   ├── planner.py          # Research plan generation&#10;│   ├── research.py         # Search and research loops&#10;│   ├── summarizer.py       # Report synthesis&#10;│   └── cache.py            # Redis cache management&#10;├── services/&#10;│   ├── exa_client.py       # Exa.ai search integration&#10;│   ├── openrouter_client.py # LLM client wrapper&#10;│   ├── stripe_client.py    # Stripe payment integration&#10;│   └── user_service.py     # User management&#10;├── schemas/                # Pydantic data models&#10;├── cli/                    # Admin command-line tools&#10;└── tests/                  # Test suite&#10;```&#10;&#10;### **Running Tests**&#10;&#10;```bash&#10;# Install test dependencies&#10;pip install pytest pytest-asyncio httpx&#10;&#10;# Run test suite&#10;pytest tests/ -v&#10;&#10;# Run with coverage&#10;pytest tests/ --cov=. --cov-report=html&#10;```&#10;&#10;### **Development Mode**&#10;&#10;```bash&#10;# Enable debug mode&#10;export XR_DEBUG=true&#10;&#10;# Start with auto-reload&#10;uvicorn main:app --reload --host 0.0.0.0 --port 8000&#10;```&#10;&#10;---&#10;&#10;## **Admin Tools**&#10;&#10;### **CLI Management**&#10;&#10;```bash&#10;# Flush Redis cache&#10;python -m cli.admin flush-cache&#10;&#10;# Create user&#10;python -m cli.admin create-user user_123 user@example.com --tier pro&#10;&#10;# Upgrade user tier&#10;python -m cli.admin upgrade-user user_123 custom&#10;```&#10;&#10;### **Admin Endpoints**&#10;&#10;```bash&#10;# Flush cache (admin only)&#10;POST /api/v1/admin/flush_cache&#10;&#10;# Trigger vector DB reindex&#10;POST /api/v1/admin/reindex&#10;```&#10;&#10;---&#10;&#10;## **Deployment**&#10;&#10;### **Docker Production**&#10;&#10;```bash&#10;# Build and deploy&#10;docker-compose -f docker-compose.prod.yml up -d&#10;&#10;# Scale API instances&#10;docker-compose up --scale api=3&#10;```&#10;&#10;### **Environment Variables**&#10;&#10;**Required for Production:**&#10;&#10;```bash&#10;OPENROUTER_API_KEY=your_production_key&#10;EXA_API_KEY=your_production_key&#10;STRIPE_SECRET_KEY=sk_live_your_live_key&#10;REDIS_URL=redis://your-redis-cluster&#10;POSTGRES_URL=postgresql://your-postgres-cluster&#10;```&#10;&#10;### **Monitoring &amp; Logging**&#10;&#10;- **Health Checks**: `/health` endpoint for load balancer monitoring&#10;- **Metrics**: Built-in FastAPI metrics and request logging&#10;- **Error Tracking**: Structured error logging with correlation IDs&#10;&#10;---&#10;&#10;## **Contributing**&#10;&#10;We welcome contributions! Please see our [Contributing Guide](CONTRIBUTING.md) for details.&#10;&#10;### **Development Workflow**&#10;&#10;1. Fork the repository&#10;2. Create a feature branch: `git checkout -b feature/amazing-feature`&#10;3. Make your changes and add tests&#10;4. Ensure tests pass: `pytest`&#10;5. Commit with conventional commits: `git commit -m &quot;feat: add amazing feature&quot;`&#10;6. Push and create a Pull Request&#10;&#10;---&#10;&#10;## **License**&#10;&#10;This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.&#10;&#10;---&#10;&#10;## **Support**&#10;&#10;- **Documentation**: [docs.nexa-research.com](https://docs.nexa-research.com)&#10;- **Issues**: [GitHub Issues](https://github.com/your-org/nexa-research-agent/issues)&#10;- **Discussions**: [GitHub Discussions](https://github.com/your-org/nexa-research-agent/discussions)&#10;- **Email**: support@nexa-research.com&#10;&#10;---&#10;&#10;## **Performance**&#10;&#10;- **Response Time**: &lt; 30s for typical research queries&#10;- **Throughput**: 100+ concurrent requests with proper scaling&#10;- **Cache Hit Rate**: 60-80% for popular topics&#10;- **Uptime**: 99.9% SLA with proper infrastructure&#10;&#10;---&#10;&#10;## **Roadmap**&#10;&#10;- [ ] **Q1 2024**: Multi-language support&#10;- [ ] **Q2 2024**: Custom data source integration  &#10;- [ ] **Q3 2024**: Real-time collaborative research&#10;- [ ] **Q4 2024**: Advanced analytics and insights&#10;&#10;---&#10;&#10;## **Acknowledgments**&#10;&#10;- **OpenRouter** for multi-model LLM access&#10;- **Exa.ai** for neural search capabilities&#10;- **Stripe** for seamless payment processing&#10;- **FastAPI** for the excellent async framework&#10;- **The AI Research Community** for inspiration and collaboration&#10;&#10;---&#10;&#10;&lt;div align=&quot;center&quot;&gt;&#10;&#10;**Built by the Nexa Research Team**&#10;&#10;[Website](https://nexa-research.com) • [Documentation](https://docs.nexa-research.com) • [Blog](https://blog.nexa-research.com)&#10;&#10;&lt;/div&gt;&#10;&#10;---&#10;&#10;**Note**: If you encounter dependency resolution issues, you can bypass locking and syncing by running:&#10;&#10;```bash&#10;pip install --frozen&#10;```&#10;" />
              <option name="updatedContent" value="# Nexa Research Agent&#10;&#10;&gt; **AI-Powered Research Automation Platform**  &#10;&gt; Generate comprehensive, well-sourced research reports on any topic using advanced LLMs and web search capabilities.&#10;&#10;[![FastAPI](https://img.shields.io/badge/FastAPI-0.104.1-green.svg)](https://fastapi.tiangolo.com)&#10;[![Python](https://img.shields.io/badge/Python-3.11+-blue.svg)](https://python.org)&#10;[![Redis](https://img.shields.io/badge/Redis-7.0-red.svg)](https://redis.io)&#10;[![Stripe](https://img.shields.io/badge/Stripe-Integrated-purple.svg)](https://stripe.com)&#10;&#10;---&#10;&#10;## **Overview**&#10;&#10;Nexa Research Agent is an intelligent platform that transforms your topic queries into comprehensive, well-structured research reports. It acts as a sophisticated orchestration layer, leveraging a powerful pipeline of LLM reasoning, advanced web search, and content synthesis to deliver publication-quality research in minutes.&#10;&#10;Our service operates on a **Bring Your Own Key (BYOK)** model.&#10;You subscribe to the Nexa platform for its speed, convenience, and structured output, while using your own API keys&#10;(e.g., for OpenRouter, Exa.ai).&#10;This gives you full control over your costs and model usage.&#10;&#10;### **Key Features**&#10;&#10;- **Intelligent Orchestration**: Sophisticated pipeline for planning, searching, and synthesizing research&#10;- **Advanced Search**: Exa.ai integration for high-quality web search and content discovery.&#10;- **Bring Your Own Key (BYOK)**: Use your own API keys for full cost control.&#10;- **Iterative Research**: Multi-iteration search loops with reflection and refinement.&#10;- **Professional Synthesis**: AI-powered report compilation with proper citations&#10;- **Flexible Pricing**: Stripe-integrated subscription for access to the Nexa platform.&#10;&#10;---&#10;&#10;## **Technology Stack**&#10;&#10;| **Component**     | **Technology** | **Purpose**                                       |&#10;|-------------------|----------------|---------------------------------------------------|&#10;| **Web Interface** | HTML/JS/CSS    | Client-side application                           |&#10;| **API Framework** | FastAPI        | High-performance async API (for server deployment)|&#10;| **LLM Provider**  | OpenRouter     | Multi-model routing (DeepSeek-R1, Claude-3, Qwen) |&#10;| **Search Engine** | Exa.ai         | Neural web search with content extraction         |&#10;| **Payments**      | Stripe         | Subscription management and billing               |&#10;| **Validation**    | Pydantic v2    | Runtime type checking and data validation         |&#10;| **Deployment**    | Docker/GitHub Pages | Containerized or Static Site Deployment      |&#10;&#10;---&#10;&#10;## **Getting Started**&#10;&#10;This project can be run as a static web page directly from the `index.html` file, which is ideal for demos and GitHub Pages.&#10;&#10;1.  **Subscribe**: Use the Stripe link on the page to subscribe.&#10;2.  **Get Keys**: After subscribing, you will be redirected and given a Nexa Access Key. You will also need your own API keys from [OpenRouter](https://openrouter.ai/) and [Exa.ai](https://exa.ai/).&#10;3.  **Run Queries**: Enter your keys into the application interface to begin running research queries.&#10;&#10;---&#10;&#10;## **License**&#10;&#10;This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.&#10;&#10;---&#10;&#10;## **Support**&#10;&#10;- **Issues**: [GitHub Issues](https://github.com/your-org/nexa-research-agent/issues)&#10;- **Discussions**: [GitHub Discussions](https://github.com/your-org/nexa-research-agent/discussions)&#10;- **Email**: support@nexa-research.com&#10;&#10;---&#10;&#10;## **Acknowledgments**&#10;&#10;- **OpenRouter** for multi-model LLM access&#10;- **Exa.ai** for neural search capabilities&#10;- **Stripe** for seamless payment processing&#10;- **FastAPI** for the excellent async framework&#10;- **The AI Research Community** for inspiration and collaboration&#10;&#10;---&#10;&#10;&lt;div align=&quot;center&quot;&gt;&#10;&#10;**Built by the Nexa Research Team**&#10;&#10;[Website](https://nexa-research.com) • [Documentation](https://docs.nexa-research.com) • [Blog](https://blog.nexa-research.com)&#10;&#10;&lt;/div&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/docker-compose.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/docker-compose.yml" />
              <option name="updatedContent" value="version: '3.8'&#10;&#10;services:&#10;  web:&#10;    build: .&#10;    ports:&#10;      - &quot;8000:8000&quot;&#10;    environment:&#10;      # This sets the default API key for the free trial.&#10;      # In production, you would manage keys securely.&#10;      - NEXA_API_KEY=nexa-free-trial-key-7-days&#10;    volumes:&#10;      - .:/app&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/index.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/index.html" />
              <option name="originalContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;  &lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot; /&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;&#10;    &lt;title&gt;Nexa Research Agent&lt;/title&gt;&#10;&#10;    &lt;!-- Tailwind CSS --&gt;&#10;    &lt;script src=&quot;https://cdn.tailwindcss.com?plugins=forms&quot;&gt;&lt;/script&gt;&#10;&#10;    &lt;!-- Lucide icons --&gt;&#10;    &lt;script type=&quot;module&quot;&gt;&#10;      import { createIcons, icons } from &quot;https://cdn.jsdelivr.net/npm/lucide@0.341.0/+esm&quot;;&#10;      window.addEventListener(&quot;DOMContentLoaded&quot;, () =&gt; createIcons({ icons }));&#10;    &lt;/script&gt;&#10;&#10;    &lt;!-- Tiny entrance animation --&gt;&#10;    &lt;style&gt;&#10;      @keyframes pop {&#10;        0% {&#10;          opacity: 0;&#10;          transform: scale(0.95);&#10;        }&#10;        100% {&#10;          opacity: 1;&#10;          transform: scale(1);&#10;        }&#10;      }&#10;      .pop-in {&#10;        animation: pop 0.4s ease-out forwards;&#10;      }&#10;      /* Hide elements by default */&#10;      .hidden {&#10;        display: none;&#10;      }&#10;    &lt;/style&gt;&#10;  &lt;/head&gt;&#10;  &lt;body class=&quot;min-h-screen bg-zinc-900 text-zinc-100 flex items-center justify-center p-4 antialiased&quot;&gt;&#10;    &lt;!-- Pricing &amp; Landing Screen --&gt;&#10;    &lt;div id=&quot;pricing-screen&quot; class=&quot;w-full max-w-xl space-y-8 pop-in&quot;&gt;&#10;      &lt;!-- Brand --&gt;&#10;      &lt;div class=&quot;flex items-center justify-center gap-3 select-none&quot;&gt;&#10;        &lt;svg width=&quot;28&quot; height=&quot;28&quot; viewBox=&quot;0 0 24 24&quot; fill=&quot;none&quot; stroke=&quot;currentColor&quot; stroke-width=&quot;1.5&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; aria-hidden=&quot;true&quot;&gt;&#10;          &lt;rect x=&quot;3&quot; y=&quot;3&quot; width=&quot;18&quot; height=&quot;18&quot; rx=&quot;2&quot; ry=&quot;2&quot; /&gt;&#10;          &lt;circle cx=&quot;8&quot; cy=&quot;8&quot; r=&quot;1.4&quot; /&gt;&#10;          &lt;circle cx=&quot;16&quot; cy=&quot;8&quot; r=&quot;1.4&quot; /&gt;&#10;          &lt;circle cx=&quot;8&quot; cy=&quot;16&quot; r=&quot;1.4&quot; /&gt;&#10;          &lt;circle cx=&quot;16&quot; cy=&quot;16&quot; r=&quot;1.4&quot; /&gt;&#10;          &lt;path d=&quot;M8 3v3m8-3v3m0 12v3m-8-3v3M3 8h3m0 8H3m18-8h-3m0 8h3&quot; /&gt;&#10;        &lt;/svg&gt;&#10;        &lt;span class=&quot;text-2xl font-semibold tracking-tight&quot;&gt;Nexa Research Agent&lt;/span&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;!-- Value Proposition --&gt;&#10;      &lt;div class=&quot;text-center&quot;&gt;&#10;        &lt;h1 class=&quot;text-3xl font-bold tracking-tight text-white sm:text-4xl&quot;&gt;Your Personal AI Research Assistant&lt;/h1&gt;&#10;        &lt;p class=&quot;mt-4 text-lg leading-8 text-zinc-300&quot;&gt;Get structured, source-backed reports on any topic in minutes. We provide the speed, convenience, and high-quality output—you bring your own API keys to control costs.&lt;/p&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;!-- Pricing Card --&gt;&#10;      &lt;div class=&quot;bg-zinc-800/60 backdrop-blur rounded-2xl shadow-xl ring-1 ring-zinc-700/50 p-8&quot;&gt;&#10;        &lt;h3 class=&quot;text-lg font-semibold leading-8 tracking-tight text-cyan-400&quot;&gt;Pro Plan&lt;/h3&gt;&#10;        &lt;p class=&quot;mt-4 text-sm leading-6 text-zinc-300&quot;&gt;Full access to the research platform, priority processing, and premium models.&lt;/p&gt;&#10;        &lt;p class=&quot;mt-6 flex items-baseline gap-x-1&quot;&gt;&#10;          &lt;span class=&quot;text-4xl font-bold tracking-tight text-white&quot;&gt;$15&lt;/span&gt;&#10;          &lt;span class=&quot;text-sm font-semibold leading-6 text-zinc-300&quot;&gt;/month&lt;/span&gt;&#10;        &lt;/p&gt;&#10;        &lt;a href=&quot;#&quot; id=&quot;subscribe-button&quot; class=&quot;mt-6 block rounded-md bg-cyan-600 px-3 py-2 text-center text-sm font-semibold leading-6 text-white shadow-sm hover:bg-cyan-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-cyan-600&quot;&gt;Get 7-day free trial&lt;/a&gt;&#10;        &lt;p class=&quot;mt-3 text-xs leading-5 text-zinc-400&quot;&gt;You will be redirected to Stripe to complete your purchase.&lt;/p&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;!-- Access Key Entry --&gt;&#10;      &lt;div class=&quot;pt-4&quot;&gt;&#10;        &lt;label for=&quot;nexa_access_key&quot; class=&quot;block text-sm font-medium leading-6 text-zinc-300&quot;&gt;Already have a key?&lt;/label&gt;&#10;        &lt;div class=&quot;mt-2 flex gap-x-2&quot;&gt;&#10;          &lt;input type=&quot;password&quot; id=&quot;nexa_access_key&quot; class=&quot;block w-full rounded-md border-0 bg-white/5 py-1.5 px-3 text-white shadow-sm ring-1 ring-inset ring-white/10 focus:ring-2 focus:ring-inset focus:ring-cyan-500 sm:text-sm sm:leading-6&quot; placeholder=&quot;Enter your Nexa Access Key&quot; /&gt;&#10;          &lt;button id=&quot;unlock-button&quot; type=&quot;button&quot; class=&quot;rounded-md bg-zinc-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-zinc-500&quot;&gt;Unlock&lt;/button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;!-- Main Application Screen --&gt;&#10;    &lt;div id=&quot;app-screen&quot; class=&quot;w-full max-w-xl space-y-8 pop-in hidden&quot;&gt;&#10;      &lt;!-- Brand bar --&gt;&#10;      &lt;div class=&quot;flex items-center justify-between gap-3 select-none&quot;&gt;&#10;        &lt;div class=&quot;flex items-center gap-3&quot;&gt;&#10;          &lt;svg width=&quot;28&quot; height=&quot;28&quot; viewBox=&quot;0 0 24 24&quot; fill=&quot;none&quot; stroke=&quot;currentColor&quot; stroke-width=&quot;1.5&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; aria-hidden=&quot;true&quot;&gt;&#10;            &lt;rect x=&quot;3&quot; y=&quot;3&quot; width=&quot;18&quot; height=&quot;18&quot; rx=&quot;2&quot; ry=&quot;2&quot; /&gt;&#10;            &lt;circle cx=&quot;8&quot; cy=&quot;8&quot; r=&quot;1.4&quot; /&gt;&#10;            &lt;circle cx=&quot;16&quot; cy=&quot;8&quot; r=&quot;1.4&quot; /&gt;&#10;            &lt;circle cx=&quot;8&quot; cy=&quot;16&quot; r=&quot;1.4&quot; /&gt;&#10;            &lt;circle cx=&quot;16&quot; cy=&quot;16&quot; r=&quot;1.4&quot; /&gt;&#10;            &lt;path d=&quot;M8 3v3m8-3v3m0 12v3m-8-3v3M3 8h3m0 8H3m18-8h-3m0 8h3&quot; /&gt;&#10;          &lt;/svg&gt;&#10;          &lt;span class=&quot;text-2xl font-semibold tracking-tight&quot;&gt;Nexa Research Agent&lt;/span&gt;&#10;        &lt;/div&gt;&#10;        &lt;button id=&quot;logout-button&quot; class=&quot;text-sm text-zinc-400 hover:text-white&quot;&gt;Logout&lt;/button&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;!-- Query bar --&gt;&#10;      &lt;form id=&quot;research-form&quot; class=&quot;flex flex-col gap-4 bg-zinc-800/60 backdrop-blur rounded-2xl shadow-xl ring-1 ring-zinc-700/50 px-5 py-4&quot;&gt;&#10;        &lt;div class=&quot;flex flex-col sm:flex-row items-center gap-3 w-full&quot;&gt;&#10;          &lt;label for=&quot;topic&quot; class=&quot;sr-only&quot;&gt;Research Topic&lt;/label&gt;&#10;          &lt;input type=&quot;text&quot; id=&quot;topic&quot; name=&quot;topic&quot; class=&quot;flex-1 bg-transparent border-0 focus:ring-0 placeholder-zinc-400 text-base w-full&quot; placeholder=&quot;What do you want to explore?&quot; required /&gt;&#10;&#10;          &lt;label for=&quot;model&quot; class=&quot;sr-only&quot;&gt;Model&lt;/label&gt;&#10;          &lt;select id=&quot;model&quot; name=&quot;model&quot; class=&quot;rounded-lg bg-zinc-700/60 py-2 px-3 text-sm focus:ring-2 focus:ring-cyan-500&quot;&gt;&#10;            &lt;option value=&quot;DeepSeek-R1-open&quot;&gt;DeepSeek R1 (open)&lt;/option&gt;&#10;            &lt;option value=&quot;Qwen-72B-instruct&quot;&gt;Qwen 72B (instruct)&lt;/option&gt;&#10;            &lt;option value=&quot;Qwen-14B-chat&quot;&gt;Qwen 14B (chat)&lt;/option&gt;&#10;            &lt;option value=&quot;Claude-3-Haiku&quot;&gt;Claude 3 Haiku&lt;/option&gt;&#10;            &lt;option value=&quot;Claude-3-Sonnet&quot;&gt;Claude 3 Sonnet&lt;/option&gt;&#10;          &lt;/select&gt;&#10;&#10;          &lt;button type=&quot;submit&quot; class=&quot;inline-flex items-center gap-1 rounded-lg bg-cyan-600 px-4 py-2 text-sm font-medium hover:bg-cyan-500 focus:outline-none focus:ring-2 focus:ring-cyan-500&quot;&gt;&#10;            &lt;i data-lucide=&quot;arrow-up-right&quot;&gt;&lt;/i&gt;&#10;            Run&#10;          &lt;/button&gt;&#10;        &lt;/div&gt;&#10;        &lt;!-- API Keys &amp; Settings --&gt;&#10;        &lt;div class=&quot;grid grid-cols-1 sm:grid-cols-2 gap-3 border-t border-zinc-700/50 pt-4&quot;&gt;&#10;          &lt;div&gt;&#10;            &lt;label for=&quot;openrouter_key&quot; class=&quot;sr-only&quot;&gt;OpenRouter API Key&lt;/label&gt;&#10;            &lt;input type=&quot;password&quot; id=&quot;openrouter_key&quot; class=&quot;w-full bg-transparent border-0 focus:ring-0 placeholder-zinc-500 text-sm&quot; placeholder=&quot;Your OpenRouter API Key...&quot; required /&gt;&#10;          &lt;/div&gt;&#10;          &lt;div&gt;&#10;            &lt;label for=&quot;exa_key&quot; class=&quot;sr-only&quot;&gt;Exa API Key&lt;/label&gt;&#10;            &lt;input type=&quot;password&quot; id=&quot;exa_key&quot; class=&quot;w-full bg-transparent border-0 focus:ring-0 placeholder-zinc-500 text-sm&quot; placeholder=&quot;Your Exa API Key...&quot; required /&gt;&#10;          &lt;/div&gt;&#10;          &lt;div class=&quot;col-span-full flex items-center gap-3&quot;&gt;&#10;            &lt;label for=&quot;temperature&quot; class=&quot;text-sm text-zinc-400&quot;&gt;Temp:&lt;/label&gt;&#10;            &lt;input type=&quot;range&quot; id=&quot;temperature&quot; name=&quot;temperature&quot; min=&quot;0&quot; max=&quot;1&quot; step=&quot;0.1&quot; value=&quot;0.7&quot; class=&quot;w-full h-2 bg-zinc-700 rounded-lg appearance-none cursor-pointer&quot; /&gt;&#10;            &lt;span id=&quot;temp-value&quot; class=&quot;text-sm text-zinc-400 w-8 text-center&quot;&gt;0.7&lt;/span&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/form&gt;&#10;&#10;      &lt;!-- Result panel --&gt;&#10;      &lt;section id=&quot;result&quot; class=&quot;space-y-4&quot;&gt;&lt;/section&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;!-- JS --&gt;&#10;    &lt;script&gt;&#10;      // --- DOM Elements ---&#10;      const pricingScreen = document.getElementById(&quot;pricing-screen&quot;);&#10;      const appScreen = document.getElementById(&quot;app-screen&quot;);&#10;      const nexaAccessKeyInput = document.getElementById(&quot;nexa_access_key&quot;);&#10;      const unlockButton = document.getElementById(&quot;unlock-button&quot;);&#10;      const logoutButton = document.getElementById(&quot;logout-button&quot;);&#10;      const subscribeButton = document.getElementById(&quot;subscribe-button&quot;);&#10;      const form = document.getElementById(&quot;research-form&quot;);&#10;      const result = document.getElementById(&quot;result&quot;);&#10;      const openRouterKeyInput = document.getElementById(&quot;openrouter_key&quot;);&#10;      const exaKeyInput = document.getElementById(&quot;exa_key&quot;);&#10;      const temperatureSlider = document.getElementById(&quot;temperature&quot;);&#10;      const tempValue = document.getElementById(&quot;temp-value&quot;);&#10;&#10;      const NEXA_KEY_STORAGE = &quot;nexa_access_key&quot;;&#10;      const OPENROUTER_KEY_STORAGE = &quot;openrouter_api_key&quot;;&#10;      const EXA_KEY_STORAGE = &quot;exa_api_key&quot;;&#10;&#10;      // --- Functions ---&#10;      function showApp() {&#10;        pricingScreen.classList.add(&quot;hidden&quot;);&#10;        appScreen.classList.remove(&quot;hidden&quot;);&#10;        // Load saved keys into the form&#10;        openRouterKeyInput.value = localStorage.getItem(OPENROUTER_KEY_STORAGE) || &quot;&quot;;&#10;        exaKeyInput.value = localStorage.getItem(EXA_KEY_STORAGE) || &quot;&quot;;&#10;      }&#10;&#10;      function showPricing() {&#10;        appScreen.classList.add(&quot;hidden&quot;);&#10;        pricingScreen.classList.remove(&quot;hidden&quot;);&#10;      }&#10;&#10;      function logout() {&#10;        localStorage.removeItem(NEXA_KEY_STORAGE);&#10;        // Optional: clear other keys on logout&#10;        // localStorage.removeItem(OPENROUTER_KEY_STORAGE);&#10;        // localStorage.removeItem(EXA_KEY_STORAGE);&#10;        showPricing();&#10;      }&#10;&#10;      async function runQuery() {&#10;        const topic = document.getElementById(&quot;topic&quot;).value.trim();&#10;        const model = document.getElementById(&quot;model&quot;).value;&#10;        const nexaKey = localStorage.getItem(NEXA_KEY_STORAGE);&#10;        const openRouterKey = openRouterKeyInput.value.trim();&#10;        const exaKey = exaKeyInput.value.trim();&#10;        const temperature = parseFloat(temperatureSlider.value);&#10;&#10;        if (!topic || !nexaKey || !openRouterKey || !exaKey) {&#10;          result.innerHTML = `&lt;div class=&quot;text-yellow-400&quot;&gt;Please provide a topic and all required API keys.&lt;/div&gt;`;&#10;          return;&#10;        }&#10;&#10;        // Save keys for convenience&#10;        localStorage.setItem(OPENROUTER_KEY_STORAGE, openRouterKey);&#10;        localStorage.setItem(EXA_KEY_STORAGE, exaKey);&#10;&#10;        result.innerHTML = '&lt;div class=&quot;text-sm text-zinc-400&quot;&gt;Research in progress…&lt;/div&gt;';&#10;&#10;        try {&#10;          // NOTE: The backend needs to be updated to accept these new parameters&#10;          const res = await fetch(&quot;/query&quot;, {&#10;            method: &quot;POST&quot;,&#10;            headers: {&#10;              &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;              Authorization: `Bearer ${nexaKey}`,&#10;            },&#10;            body: JSON.stringify({&#10;              topic,&#10;              model,&#10;              temperature,&#10;              // The backend will need to be adapted to proxy requests using these keys&#10;              credentials: {&#10;                openrouter_api_key: openRouterKey,&#10;                exa_api_key: exaKey,&#10;              },&#10;            }),&#10;          });&#10;          if (!res.ok) {&#10;            const errorData = await res.json().catch(() =&gt; ({ detail: res.statusText }));&#10;            throw new Error(errorData.detail || res.statusText);&#10;          }&#10;          const { report } = await res.json();&#10;          result.innerHTML = `&lt;pre class=&quot;whitespace-pre-wrap bg-zinc-800/60 p-4 rounded-xl text-sm leading-6&quot;&gt;${JSON.stringify(report, null, 2)}&lt;/pre&gt;`;&#10;        } catch (err) {&#10;          result.innerHTML = `&lt;div class=&quot;text-red-400&quot;&gt;Error: ${err.message}&lt;/div&gt;`;&#10;        }&#10;      }&#10;&#10;      // --- Event Listeners ---&#10;      subscribeButton.addEventListener(&quot;click&quot;, async (e) =&gt; {&#10;        e.preventDefault();&#10;        result.innerHTML = &quot;&quot;; // Clear previous results/errors&#10;        try {&#10;          const res = await fetch(&quot;/create-checkout-session&quot;, { method: &quot;POST&quot; });&#10;          if (!res.ok) {&#10;            const errorData = await res.json().catch(() =&gt; ({ detail: &quot;Failed to create checkout session.&quot; }));&#10;            throw new Error(errorData.detail);&#10;          }&#10;          const { url } = await res.json();&#10;          window.location.href = url; // Redirect to Stripe&#10;        } catch (err) {&#10;          const pricingCard = document.querySelector(&quot;#pricing-screen .p-8&quot;);&#10;          const errorDiv = document.createElement(&quot;p&quot;);&#10;          errorDiv.className = &quot;text-red-400 text-sm mt-4 text-center&quot;;&#10;          errorDiv.textContent = `Error: ${err.message}`;&#10;          pricingCard.appendChild(errorDiv);&#10;        }&#10;      });&#10;&#10;      unlockButton.addEventListener(&quot;click&quot;, () =&gt; {&#10;        const key = nexaAccessKeyInput.value.trim();&#10;        if (key) {&#10;          // In a real app, you'd validate this key against a server endpoint&#10;          localStorage.setItem(NEXA_KEY_STORAGE, key);&#10;          showApp();&#10;        }&#10;      });&#10;&#10;      logoutButton.addEventListener(&quot;click&quot;, logout);&#10;&#10;      form.addEventListener(&quot;submit&quot;, async (e) =&gt; {&#10;        e.preventDefault();&#10;        await runQuery();&#10;      });&#10;&#10;      temperatureSlider.addEventListener(&quot;input&quot;, (e) =&gt; {&#10;        tempValue.textContent = parseFloat(e.target.value).toFixed(1);&#10;      });&#10;&#10;      // --- Initial Load ---&#10;      document.addEventListener(&quot;DOMContentLoaded&quot;, () =&gt; {&#10;        const savedNexaKey = localStorage.getItem(NEXA_KEY_STORAGE);&#10;        if (savedNexaKey) {&#10;          showApp();&#10;        } else {&#10;          showPricing();&#10;        }&#10;      });&#10;    &lt;/script&gt;&#10;  &lt;/body&gt;&#10;&lt;/html&gt;&#10;" />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;  &lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot; /&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;&#10;    &lt;title&gt;Nexa Research Agent&lt;/title&gt;&#10;&#10;    &lt;!-- Tailwind CSS --&gt;&#10;    &lt;script src=&quot;https://cdn.tailwindcss.com?plugins=forms&quot;&gt;&lt;/script&gt;&#10;&#10;    &lt;!-- Lucide icons --&gt;&#10;    &lt;script type=&quot;module&quot;&gt;&#10;      import { createIcons, icons } from &quot;https://cdn.jsdelivr.net/npm/lucide@0.341.0/+esm&quot;;&#10;      window.addEventListener(&quot;DOMContentLoaded&quot;, () =&gt; createIcons({ icons }));&#10;    &lt;/script&gt;&#10;&#10;    &lt;!-- Tiny entrance animation --&gt;&#10;    &lt;style&gt;&#10;      @keyframes pop {&#10;        0% {&#10;          opacity: 0;&#10;          transform: scale(0.95);&#10;        }&#10;        100% {&#10;          opacity: 1;&#10;          transform: scale(1);&#10;        }&#10;      }&#10;      .pop-in {&#10;        animation: pop 0.4s ease-out forwards;&#10;      }&#10;      /* Hide elements by default */&#10;      .hidden {&#10;        display: none;&#10;      }&#10;    &lt;/style&gt;&#10;  &lt;/head&gt;&#10;  &lt;body class=&quot;min-h-screen bg-zinc-900 text-zinc-100 flex items-center justify-center p-4 antialiased&quot;&gt;&#10;    &lt;!-- Pricing &amp; Landing Screen --&gt;&#10;    &lt;div id=&quot;pricing-screen&quot; class=&quot;w-full max-w-xl space-y-8 pop-in&quot;&gt;&#10;      &lt;!-- Brand --&gt;&#10;      &lt;div class=&quot;flex items-center justify-center gap-3 select-none&quot;&gt;&#10;        &lt;svg width=&quot;28&quot; height=&quot;28&quot; viewBox=&quot;0 0 24 24&quot; fill=&quot;none&quot; stroke=&quot;currentColor&quot; stroke-width=&quot;1.5&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; aria-hidden=&quot;true&quot;&gt;&#10;          &lt;rect x=&quot;3&quot; y=&quot;3&quot; width=&quot;18&quot; height=&quot;18&quot; rx=&quot;2&quot; ry=&quot;2&quot; /&gt;&#10;          &lt;circle cx=&quot;8&quot; cy=&quot;8&quot; r=&quot;1.4&quot; /&gt;&#10;          &lt;circle cx=&quot;16&quot; cy=&quot;8&quot; r=&quot;1.4&quot; /&gt;&#10;          &lt;circle cx=&quot;8&quot; cy=&quot;16&quot; r=&quot;1.4&quot; /&gt;&#10;          &lt;circle cx=&quot;16&quot; cy=&quot;16&quot; r=&quot;1.4&quot; /&gt;&#10;          &lt;path d=&quot;M8 3v3m8-3v3m0 12v3m-8-3v3M3 8h3m0 8H3m18-8h-3m0 8h3&quot; /&gt;&#10;        &lt;/svg&gt;&#10;        &lt;span class=&quot;text-2xl font-semibold tracking-tight&quot;&gt;Nexa Research Agent&lt;/span&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;!-- Value Proposition --&gt;&#10;      &lt;div class=&quot;text-center&quot;&gt;&#10;        &lt;h1 class=&quot;text-3xl font-bold tracking-tight text-white sm:text-4xl&quot;&gt;Your Personal AI Research Assistant&lt;/h1&gt;&#10;        &lt;p class=&quot;mt-4 text-lg leading-8 text-zinc-300&quot;&gt;Get structured, source-backed reports on any topic in minutes. We provide the speed, convenience, and high-quality output—you bring your own API keys to control costs.&lt;/p&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;!-- Pricing Card --&gt;&#10;      &lt;div class=&quot;bg-zinc-800/60 backdrop-blur rounded-2xl shadow-xl ring-1 ring-zinc-700/50 p-8&quot;&gt;&#10;        &lt;h3 class=&quot;text-lg font-semibold leading-8 tracking-tight text-cyan-400&quot;&gt;Pro Plan&lt;/h3&gt;&#10;        &lt;p class=&quot;mt-4 text-sm leading-6 text-zinc-300&quot;&gt;Full access to the research platform, priority processing, and premium models.&lt;/p&gt;&#10;        &lt;p class=&quot;mt-6 flex items-baseline gap-x-1&quot;&gt;&#10;          &lt;span class=&quot;text-4xl font-bold tracking-tight text-white&quot;&gt;$15&lt;/span&gt;&#10;          &lt;span class=&quot;text-sm font-semibold leading-6 text-zinc-300&quot;&gt;/month&lt;/span&gt;&#10;        &lt;/p&gt;&#10;        &lt;a href=&quot;https://buy.stripe.com/3cI7sM2xLcs2dCPgF7bjW02&quot; id=&quot;subscribe-button&quot; class=&quot;mt-6 block rounded-md bg-cyan-600 px-3 py-2 text-center text-sm font-semibold leading-6 text-white shadow-sm hover:bg-cyan-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-cyan-600&quot;&gt;Get 7-day free trial&lt;/a&gt;&#10;        &lt;p class=&quot;mt-3 text-xs leading-5 text-zinc-400&quot;&gt;You will be redirected to Stripe to complete your purchase.&lt;/p&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;!-- Access Key Entry --&gt;&#10;      &lt;div class=&quot;pt-4&quot;&gt;&#10;        &lt;label for=&quot;nexa_access_key&quot; class=&quot;block text-sm font-medium leading-6 text-zinc-300&quot;&gt;Already have a key?&lt;/label&gt;&#10;        &lt;div class=&quot;mt-2 flex gap-x-2&quot;&gt;&#10;          &lt;input type=&quot;password&quot; id=&quot;nexa_access_key&quot; class=&quot;block w-full rounded-md border-0 bg-white/5 py-1.5 px-3 text-white shadow-sm ring-1 ring-inset ring-white/10 focus:ring-2 focus:ring-inset focus:ring-cyan-500 sm:text-sm sm:leading-6&quot; placeholder=&quot;Enter your Nexa Access Key&quot; /&gt;&#10;          &lt;button id=&quot;unlock-button&quot; type=&quot;button&quot; class=&quot;rounded-md bg-zinc-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-zinc-500&quot;&gt;Unlock&lt;/button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;!-- Main Application Screen --&gt;&#10;    &lt;div id=&quot;app-screen&quot; class=&quot;w-full max-w-xl space-y-8 pop-in hidden&quot;&gt;&#10;      &lt;!-- Brand bar --&gt;&#10;      &lt;div class=&quot;flex items-center justify-between gap-3 select-none&quot;&gt;&#10;        &lt;div class=&quot;flex items-center gap-3&quot;&gt;&#10;          &lt;svg width=&quot;28&quot; height=&quot;28&quot; viewBox=&quot;0 0 24 24&quot; fill=&quot;none&quot; stroke=&quot;currentColor&quot; stroke-width=&quot;1.5&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; aria-hidden=&quot;true&quot;&gt;&#10;            &lt;rect x=&quot;3&quot; y=&quot;3&quot; width=&quot;18&quot; height=&quot;18&quot; rx=&quot;2&quot; ry=&quot;2&quot; /&gt;&#10;            &lt;circle cx=&quot;8&quot; cy=&quot;8&quot; r=&quot;1.4&quot; /&gt;&#10;            &lt;circle cx=&quot;16&quot; cy=&quot;8&quot; r=&quot;1.4&quot; /&gt;&#10;            &lt;circle cx=&quot;8&quot; cy=&quot;16&quot; r=&quot;1.4&quot; /&gt;&#10;            &lt;circle cx=&quot;16&quot; cy=&quot;16&quot; r=&quot;1.4&quot; /&gt;&#10;            &lt;path d=&quot;M8 3v3m8-3v3m0 12v3m-8-3v3M3 8h3m0 8H3m18-8h-3m0 8h3&quot; /&gt;&#10;          &lt;/svg&gt;&#10;          &lt;span class=&quot;text-2xl font-semibold tracking-tight&quot;&gt;Nexa Research Agent&lt;/span&gt;&#10;        &lt;/div&gt;&#10;        &lt;button id=&quot;logout-button&quot; class=&quot;text-sm text-zinc-400 hover:text-white&quot;&gt;Logout&lt;/button&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;!-- Query bar --&gt;&#10;      &lt;form id=&quot;research-form&quot; class=&quot;flex flex-col gap-4 bg-zinc-800/60 backdrop-blur rounded-2xl shadow-xl ring-1 ring-zinc-700/50 px-5 py-4&quot;&gt;&#10;        &lt;div class=&quot;flex flex-col sm:flex-row items-center gap-3 w-full&quot;&gt;&#10;          &lt;label for=&quot;topic&quot; class=&quot;sr-only&quot;&gt;Research Topic&lt;/label&gt;&#10;          &lt;input type=&quot;text&quot; id=&quot;topic&quot; name=&quot;topic&quot; class=&quot;flex-1 bg-transparent border-0 focus:ring-0 placeholder-zinc-400 text-base w-full&quot; placeholder=&quot;What do you want to explore?&quot; required /&gt;&#10;&#10;          &lt;label for=&quot;model&quot; class=&quot;sr-only&quot;&gt;Model&lt;/label&gt;&#10;          &lt;select id=&quot;model&quot; name=&quot;model&quot; class=&quot;rounded-lg bg-zinc-700/60 py-2 px-3 text-sm focus:ring-2 focus:ring-cyan-500&quot;&gt;&#10;            &lt;option value=&quot;DeepSeek-R1-open&quot;&gt;DeepSeek R1 (open)&lt;/option&gt;&#10;            &lt;option value=&quot;Qwen-72B-instruct&quot;&gt;Qwen 72B (instruct)&lt;/option&gt;&#10;            &lt;option value=&quot;Qwen-14B-chat&quot;&gt;Qwen 14B (chat)&lt;/option&gt;&#10;            &lt;option value=&quot;Claude-3-Haiku&quot;&gt;Claude 3 Haiku&lt;/option&gt;&#10;            &lt;option value=&quot;Claude-3-Sonnet&quot;&gt;Claude 3 Sonnet&lt;/option&gt;&#10;          &lt;/select&gt;&#10;&#10;          &lt;button type=&quot;submit&quot; class=&quot;inline-flex items-center gap-1 rounded-lg bg-cyan-600 px-4 py-2 text-sm font-medium hover:bg-cyan-500 focus:outline-none focus:ring-2 focus:ring-cyan-500&quot;&gt;&#10;            &lt;i data-lucide=&quot;arrow-up-right&quot;&gt;&lt;/i&gt;&#10;            Run&#10;          &lt;/button&gt;&#10;        &lt;/div&gt;&#10;        &lt;!-- API Keys &amp; Settings --&gt;&#10;        &lt;div class=&quot;grid grid-cols-1 sm:grid-cols-2 gap-3 border-t border-zinc-700/50 pt-4&quot;&gt;&#10;          &lt;div&gt;&#10;            &lt;label for=&quot;openrouter_key&quot; class=&quot;sr-only&quot;&gt;OpenRouter API Key&lt;/label&gt;&#10;            &lt;input type=&quot;password&quot; id=&quot;openrouter_key&quot; class=&quot;w-full bg-transparent border-0 focus:ring-0 placeholder-zinc-500 text-sm&quot; placeholder=&quot;Your OpenRouter API Key...&quot; required /&gt;&#10;          &lt;/div&gt;&#10;          &lt;div&gt;&#10;            &lt;label for=&quot;exa_key&quot; class=&quot;sr-only&quot;&gt;Exa API Key&lt;/label&gt;&#10;            &lt;input type=&quot;password&quot; id=&quot;exa_key&quot; class=&quot;w-full bg-transparent border-0 focus:ring-0 placeholder-zinc-500 text-sm&quot; placeholder=&quot;Your Exa API Key...&quot; required /&gt;&#10;          &lt;/div&gt;&#10;          &lt;div class=&quot;col-span-full flex items-center gap-3&quot;&gt;&#10;            &lt;label for=&quot;temperature&quot; class=&quot;text-sm text-zinc-400&quot;&gt;Temp:&lt;/label&gt;&#10;            &lt;input type=&quot;range&quot; id=&quot;temperature&quot; name=&quot;temperature&quot; min=&quot;0&quot; max=&quot;1&quot; step=&quot;0.1&quot; value=&quot;0.7&quot; class=&quot;w-full h-2 bg-zinc-700 rounded-lg appearance-none cursor-pointer&quot; /&gt;&#10;            &lt;span id=&quot;temp-value&quot; class=&quot;text-sm text-zinc-400 w-8 text-center&quot;&gt;0.7&lt;/span&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/form&gt;&#10;&#10;      &lt;!-- Result panel --&gt;&#10;      &lt;section id=&quot;result&quot; class=&quot;space-y-4&quot;&gt;&lt;/section&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;!-- JS --&gt;&#10;    &lt;script&gt;&#10;      // --- DOM Elements ---&#10;      const pricingScreen = document.getElementById(&quot;pricing-screen&quot;);&#10;      const appScreen = document.getElementById(&quot;app-screen&quot;);&#10;      const nexaAccessKeyInput = document.getElementById(&quot;nexa_access_key&quot;);&#10;      const unlockButton = document.getElementById(&quot;unlock-button&quot;);&#10;      const logoutButton = document.getElementById(&quot;logout-button&quot;);&#10;      const subscribeButton = document.getElementById(&quot;subscribe-button&quot;);&#10;      const form = document.getElementById(&quot;research-form&quot;);&#10;      const result = document.getElementById(&quot;result&quot;);&#10;      const openRouterKeyInput = document.getElementById(&quot;openrouter_key&quot;);&#10;      const exaKeyInput = document.getElementById(&quot;exa_key&quot;);&#10;      const temperatureSlider = document.getElementById(&quot;temperature&quot;);&#10;      const tempValue = document.getElementById(&quot;temp-value&quot;);&#10;&#10;      const NEXA_KEY_STORAGE = &quot;nexa_access_key&quot;;&#10;      const OPENROUTER_KEY_STORAGE = &quot;openrouter_api_key&quot;;&#10;      const EXA_KEY_STORAGE = &quot;exa_api_key&quot;;&#10;&#10;      // --- Functions ---&#10;      function showApp() {&#10;        pricingScreen.classList.add(&quot;hidden&quot;);&#10;        appScreen.classList.remove(&quot;hidden&quot;);&#10;        // Load saved keys into the form&#10;        openRouterKeyInput.value = localStorage.getItem(OPENROUTER_KEY_STORAGE) || &quot;&quot;;&#10;        exaKeyInput.value = localStorage.getItem(EXA_KEY_STORAGE) || &quot;&quot;;&#10;      }&#10;&#10;      function showPricing() {&#10;        appScreen.classList.add(&quot;hidden&quot;);&#10;        pricingScreen.classList.remove(&quot;hidden&quot;);&#10;      }&#10;&#10;      function logout() {&#10;        localStorage.removeItem(NEXA_KEY_STORAGE);&#10;        // Optional: clear other keys on logout&#10;        // localStorage.removeItem(OPENROUTER_KEY_STORAGE);&#10;        // localStorage.removeItem(EXA_KEY_STORAGE);&#10;        showPricing();&#10;      }&#10;&#10;      async function runQuery() {&#10;        const topic = document.getElementById(&quot;topic&quot;).value.trim();&#10;        const model = document.getElementById(&quot;model&quot;).value;&#10;        const nexaKey = localStorage.getItem(NEXA_KEY_STORAGE);&#10;        const openRouterKey = openRouterKeyInput.value.trim();&#10;        const exaKey = exaKeyInput.value.trim();&#10;        const temperature = parseFloat(temperatureSlider.value);&#10;&#10;        if (!topic || !nexaKey || !openRouterKey || !exaKey) {&#10;          result.innerHTML = `&lt;div class=&quot;text-yellow-400&quot;&gt;Please provide a topic and all required API keys.&lt;/div&gt;`;&#10;          return;&#10;        }&#10;&#10;        // Save keys for convenience&#10;        localStorage.setItem(OPENROUTER_KEY_STORAGE, openRouterKey);&#10;        localStorage.setItem(EXA_KEY_STORAGE, exaKey);&#10;&#10;        result.innerHTML = '&lt;div class=&quot;text-sm text-zinc-400&quot;&gt;Research in progress…&lt;/div&gt;';&#10;&#10;        // --- Mock API for GitHub Pages Demo ---&#10;        // This simulates a backend call without needing a running server.&#10;        setTimeout(() =&gt; {&#10;          const dummy_report = {&#10;            title: `Research Report on: ${topic}`,&#10;            summary: `This is a synthesized summary based on multiple sources. The actual implementation would use Exa.ai and the ${model} model to generate this.`,&#10;            sources: [&#10;              &quot;https://example.com/source1&quot;,&#10;              &quot;https://example.com/source2&quot;,&#10;              &quot;https://example.com/source3&quot;,&#10;            ],&#10;          };&#10;          result.innerHTML = `&lt;pre class=&quot;whitespace-pre-wrap bg-zinc-800/60 p-4 rounded-xl text-sm leading-6&quot;&gt;${JSON.stringify(dummy_report, null, 2)}&lt;/pre&gt;`;&#10;        }, 1500);&#10;        // --- End Mock API ---&#10;      }&#10;&#10;      // --- Event Listeners ---&#10;      subscribeButton.addEventListener(&quot;click&quot;, (e) =&gt; {&#10;        // The link will now navigate directly to Stripe.&#10;        // No fetch call needed.&#10;      });&#10;&#10;      unlockButton.addEventListener(&quot;click&quot;, () =&gt; {&#10;        const key = nexaAccessKeyInput.value.trim();&#10;        if (key) {&#10;          // In a real app, you'd validate this key against a server endpoint&#10;          localStorage.setItem(NEXA_KEY_STORAGE, key);&#10;          showApp();&#10;        }&#10;      });&#10;&#10;      logoutButton.addEventListener(&quot;click&quot;, logout);&#10;&#10;      form.addEventListener(&quot;submit&quot;, async (e) =&gt; {&#10;        e.preventDefault();&#10;        await runQuery();&#10;      });&#10;&#10;      temperatureSlider.addEventListener(&quot;input&quot;, (e) =&gt; {&#10;        tempValue.textContent = parseFloat(e.target.value).toFixed(1);&#10;      });&#10;&#10;      // --- Initial Load ---&#10;      document.addEventListener(&quot;DOMContentLoaded&quot;, () =&gt; {&#10;        const urlParams = new URLSearchParams(window.location.search);&#10;        // Stripe can be configured to redirect to a success URL.&#10;        // We check for a parameter on that URL.&#10;        if (urlParams.has(&quot;session_id&quot;)) {&#10;          // Simulate receiving a key after successful payment&#10;          const fakeKey = &quot;nexa-key-&quot; + Math.random().toString(36).substring(2, 15);&#10;          localStorage.setItem(NEXA_KEY_STORAGE, fakeKey);&#10;          // Clean up the URL&#10;          window.history.replaceState({}, document.title, window.location.pathname);&#10;        }&#10;&#10;        const savedNexaKey = localStorage.getItem(NEXA_KEY_STORAGE);&#10;        if (savedNexaKey) {&#10;          showApp();&#10;        } else {&#10;          showPricing();&#10;        }&#10;      });&#10;    &lt;/script&gt;&#10;  &lt;/body&gt;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/main.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/main.py" />
              <option name="originalContent" value="from fastapi import FastAPI, HTTPException, Security, Request, Header&#10;from fastapi.responses import FileResponse, JSONResponse&#10;from fastapi.security import APIKeyHeader&#10;from pydantic import BaseModel&#10;import aioredis&#10;import datetime&#10;import os&#10;import stripe&#10;&#10;from api.routes import router&#10;from config import REDIS_URL&#10;from services.helix_client import HelixClient&#10;&#10;# --- Configuration ---&#10;API_KEY_NAME = &quot;Authorization&quot;&#10;API_KEY_HEADER = APIKeyHeader(name=API_KEY_NAME, auto_error=True)&#10;&#10;# In a real application, this would be a database of paying users.&#10;# This key simulates a user with an active subscription.&#10;VALID_API_KEYS = {&#10;    os.environ.get(&quot;NEXA_API_KEY&quot;, &quot;nexa-free-trial-key-7-days&quot;)&#10;}&#10;&#10;# Stripe Configuration&#10;stripe.api_key = os.environ.get(&quot;STRIPE_SECRET_KEY&quot;)&#10;STRIPE_WEBHOOK_SECRET = os.environ.get(&quot;STRIPE_WEBHOOK_SECRET&quot;)&#10;STRIPE_PRICE_ID = os.environ.get(&quot;STRIPE_PRICE_ID&quot;) # The Price ID for your $15/month plan&#10;&#10;# --- Pydantic Models ---&#10;class QueryRequest(BaseModel):&#10;    topic: str&#10;    model: str&#10;    temperature: float&#10;    credentials: dict&#10;&#10;class Report(BaseModel):&#10;    title: str&#10;    summary: str&#10;    sources: list[str]&#10;&#10;class QueryResponse(BaseModel):&#10;    report: Report&#10;&#10;class CheckoutSessionResponse(BaseModel):&#10;    sessionId: str&#10;    url: str&#10;&#10;# --- FastAPI App ---&#10;app = FastAPI(&#10;    title=&quot;Nexa Research Agent API&quot;,&#10;    description=&quot;A simple API for the Nexa Research Agent.&quot;,&#10;    version=&quot;1.0.0&quot;,&#10;)&#10;&#10;@app.on_event(&quot;startup&quot;)&#10;async def startup_event():&#10;    app.state.redis = await aiorededis.from_url(REDIS_URL)&#10;    app.state.helix = HelixClient()&#10;&#10;@app.on_event(&quot;shutdown&quot;)&#10;async def shutdown_event():&#10;    await app.state.redis.close()&#10;    await app.state.helix.client.aclose()&#10;&#10;# Include API routes&#10;app.include_router(router, prefix=&quot;/api/v1&quot;)&#10;&#10;async def get_api_key(api_key_header: str = Security(API_KEY_HEADER)):&#10;    &quot;&quot;&quot;&#10;    Validates the API key from the Authorization header.&#10;    The key should be sent as 'Bearer &lt;key&gt;'.&#10;    &quot;&quot;&quot;&#10;    if &quot; &quot; not in api_key_header:&#10;        raise HTTPException(status_code=401, detail=&quot;Invalid Authorization header format&quot;)&#10;&#10;    token_prefix, token = api_key_header.split(&quot; &quot;, 1)&#10;&#10;    if token_prefix != &quot;Bearer&quot;:&#10;        raise HTTPException(status_code=401, detail=&quot;Invalid token scheme. Use 'Bearer'.&quot;)&#10;&#10;    # In a real SaaS, you would look up the key in your database,&#10;    # check subscription status, rate limits, trial period, etc.&#10;    if token not in VALID_API_KEYS:&#10;        raise HTTPException(status_code=403, detail=&quot;Invalid or expired API Key&quot;)&#10;    return token&#10;&#10;@app.get(&quot;/&quot;, include_in_schema=False)&#10;async def read_root():&#10;    &quot;&quot;&quot;Serves the main HTML page.&quot;&quot;&quot;&#10;    return FileResponse(&quot;index.html&quot;)&#10;&#10;@app.get(&quot;/health&quot;)&#10;async def health_check():&#10;    return JSONResponse({&#10;        &quot;status&quot;: &quot;healthy&quot;,&#10;        &quot;timestamp&quot;: datetime.datetime.utcnow().isoformat(),&#10;        &quot;version&quot;: &quot;1.0.0&quot;&#10;    })&#10;&#10;@app.post(&quot;/create-checkout-session&quot;, response_model=CheckoutSessionResponse)&#10;async def create_checkout_session():&#10;    &quot;&quot;&quot;Creates a Stripe checkout session for the subscription.&quot;&quot;&quot;&#10;    if not STRIPE_PRICE_ID:&#10;        raise HTTPException(status_code=500, detail=&quot;Stripe Price ID is not configured.&quot;)&#10;    try:&#10;        checkout_session = stripe.checkout.Session.create(&#10;            line_items=[{&quot;price&quot;: STRIPE_PRICE_ID, &quot;quantity&quot;: 1}],&#10;            mode=&quot;subscription&quot;,&#10;            success_url=&quot;http://localhost:8000?session_id={CHECKOUT_SESSION_ID}&quot;, # User is redirected here&#10;            cancel_url=&quot;http://localhost:8000&quot;,&#10;            subscription_data={&quot;trial_period_days&quot;: 7},&#10;        )&#10;        return CheckoutSessionResponse(sessionId=checkout_session.id, url=checkout_session.url)&#10;    except Exception as e:&#10;        raise HTTPException(status_code=500, detail=str(e))&#10;&#10;@app.post(&quot;/stripe-webhook&quot;)&#10;async def stripe_webhook(request: Request, stripe_signature: str = Header(None)):&#10;    &quot;&quot;&quot;Listens for events from Stripe.&quot;&quot;&quot;&#10;    if not STRIPE_WEBHOOK_SECRET:&#10;        raise HTTPException(status_code=500, detail=&quot;Stripe webhook secret is not configured.&quot;)&#10;&#10;    payload = await request.body()&#10;    try:&#10;        event = stripe.Webhook.construct_event(&#10;            payload=payload, sig_header=stripe_signature, secret=STRIPE_WEBHOOK_SECRET&#10;        )&#10;    except ValueError as e:&#10;        # Invalid payload&#10;        raise HTTPException(status_code=400, detail=str(e))&#10;    except stripe.error.SignatureVerificationError as e:&#10;        # Invalid signature&#10;        raise HTTPException(status_code=400, detail=str(e))&#10;&#10;    # Handle the checkout.session.completed event&#10;    if event[&quot;type&quot;] == &quot;checkout.session.completed&quot;:&#10;        session = event[&quot;data&quot;][&quot;object&quot;]&#10;        # TODO: Provision the user's access here.&#10;        # 1. Get customer details: session.customer_details.email&#10;        # 2. Check if user exists in your DB, otherwise create one.&#10;        # 3. Generate a new Nexa Access Key.&#10;        # 4. Store the key and Stripe customer ID in your database.&#10;        # 5. Email the key to the user.&#10;        print(f&quot;Payment successful for session: {session.id}&quot;)&#10;        print(f&quot;Customer email: {session.get('customer_details', {}).get('email')}&quot;)&#10;&#10;    return {&quot;status&quot;: &quot;success&quot;}&#10;&#10;@app.post(&quot;/query&quot;, response_model=QueryResponse)&#10;async def run_query(request: QueryRequest, api_key: str = Security(get_api_key)):&#10;    &quot;&quot;&quot;&#10;    Accepts a research topic and returns a structured report.&#10;    Requires a valid API key.&#10;    &quot;&quot;&quot;&#10;    # Placeholder for the actual research logic (plan -&gt; search -&gt; synthesize)&#10;    print(f&quot;Received query for '{request.topic}' using model '{request.model}'&quot;)&#10;    print(f&quot;Credentials received for user: {api_key[:12]}...&quot;) # Log securely&#10;&#10;    # Simulate a successful research report&#10;    dummy_report = Report(&#10;        title=f&quot;Research Report on: {request.topic}&quot;,&#10;        summary=&quot;This is a synthesized summary based on multiple sources. The actual implementation would use Exa.ai and an LLM to generate this.&quot;,&#10;        sources=[&#10;            &quot;https://example.com/source1&quot;,&#10;            &quot;https://example.com/source2&quot;,&#10;            &quot;https://example.com/source3&quot;,&#10;        ],&#10;    )&#10;    return QueryResponse(report=dummy_report)&#10;" />
              <option name="updatedContent" value="from fastapi import FastAPI, HTTPException, Security, Request, Header&#10;from fastapi.responses import FileResponse, JSONResponse&#10;from fastapi.security import APIKeyHeader&#10;from pydantic import BaseModel&#10;import aioredis&#10;import datetime&#10;import os&#10;&#10;from api.routes import router&#10;from config import REDIS_URL&#10;from services.helix_client import HelixClient&#10;&#10;# --- Configuration ---&#10;API_KEY_NAME = &quot;Authorization&quot;&#10;API_KEY_HEADER = APIKeyHeader(name=API_KEY_NAME, auto_error=True)&#10;&#10;# In a real application, this would be a database of paying users.&#10;# This key simulates a user with an active subscription.&#10;VALID_API_KEYS = {&#10;    os.environ.get(&quot;NEXA_API_KEY&quot;, &quot;nexa-free-trial-key-7-days&quot;)&#10;}&#10;&#10;# --- Pydantic Models ---&#10;class QueryRequest(BaseModel):&#10;    topic: str&#10;    model: str&#10;    temperature: float&#10;    credentials: dict&#10;&#10;class Report(BaseModel):&#10;    title: str&#10;    summary: str&#10;    sources: list[str]&#10;&#10;class QueryResponse(BaseModel):&#10;    report: Report&#10;&#10;# --- FastAPI App ---&#10;app = FastAPI(&#10;    title=&quot;Nexa Research Agent API&quot;,&#10;    description=&quot;A simple API for the Nexa Research Agent.&quot;,&#10;    version=&quot;1.0.0&quot;,&#10;)&#10;&#10;@app.on_event(&quot;startup&quot;)&#10;async def startup_event():&#10;    app.state.redis = await aioredis.from_url(REDIS_URL)&#10;    app.state.helix = HelixClient()&#10;&#10;@app.on_event(&quot;shutdown&quot;)&#10;async def shutdown_event():&#10;    await app.state.redis.close()&#10;    await app.state.helix.client.aclose()&#10;&#10;# Include API routes&#10;app.include_router(router, prefix=&quot;/api/v1&quot;)&#10;&#10;async def get_api_key(api_key_header: str = Security(API_KEY_HEADER)):&#10;    &quot;&quot;&quot;&#10;    Validates the API key from the Authorization header.&#10;    The key should be sent as 'Bearer &lt;key&gt;'.&#10;    &quot;&quot;&quot;&#10;    if &quot; &quot; not in api_key_header:&#10;        raise HTTPException(status_code=401, detail=&quot;Invalid Authorization header format&quot;)&#10;&#10;    token_prefix, token = api_key_header.split(&quot; &quot;, 1)&#10;&#10;    if token_prefix != &quot;Bearer&quot;:&#10;        raise HTTPException(status_code=401, detail=&quot;Invalid token scheme. Use 'Bearer'.&quot;)&#10;&#10;    # In a real SaaS, you would look up the key in your database,&#10;    # check subscription status, rate limits, trial period, etc.&#10;    if token not in VALID_API_KEYS:&#10;        raise HTTPException(status_code=403, detail=&quot;Invalid or expired API Key&quot;)&#10;    return token&#10;&#10;@app.get(&quot;/&quot;, include_in_schema=False)&#10;async def read_root():&#10;    &quot;&quot;&quot;Serves the main HTML page.&quot;&quot;&quot;&#10;    return FileResponse(&quot;index.html&quot;)&#10;&#10;@app.get(&quot;/health&quot;)&#10;async def health_check():&#10;    return JSONResponse({&#10;        &quot;status&quot;: &quot;healthy&quot;,&#10;        &quot;timestamp&quot;: datetime.datetime.utcnow().isoformat(),&#10;        &quot;version&quot;: &quot;1.0.0&quot;&#10;    })&#10;&#10;@app.post(&quot;/query&quot;, response_model=QueryResponse)&#10;async def run_query(request: QueryRequest, api_key: str = Security(get_api_key)):&#10;    &quot;&quot;&quot;&#10;    Accepts a research topic and returns a structured report.&#10;    Requires a valid API key.&#10;    &quot;&quot;&quot;&#10;    # Placeholder for the actual research logic (plan -&gt; search -&gt; synthesize)&#10;    print(f&quot;Received query for '{request.topic}' using model '{request.model}'&quot;)&#10;    print(f&quot;Credentials received for user: {api_key[:12]}...&quot;) # Log securely&#10;&#10;    # Simulate a successful research report&#10;    dummy_report = Report(&#10;        title=f&quot;Research Report on: {request.topic}&quot;,&#10;        summary=&quot;This is a synthesized summary based on multiple sources. The actual implementation would use Exa.ai and an LLM to generate this.&quot;,&#10;        sources=[&#10;            &quot;https://example.com/source1&quot;,&#10;            &quot;https://example.com/source2&quot;,&#10;            &quot;https://example.com/source3&quot;,&#10;        ],&#10;    )&#10;    return QueryResponse(report=dummy_report)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/requirements.txt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/requirements.txt" />
              <option name="originalContent" value="fastapi&#10;uvicorn[standard]&#10;python-dotenv&#10;&#10;" />
              <option name="updatedContent" value="fastapi&#10;uvicorn[standard]&#10;python-dotenv&#10;stripe" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>